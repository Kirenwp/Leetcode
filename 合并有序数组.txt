    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        sorted = []
        p1, p2 = 0, 0
        while p1 < m or p2 < n: #两个只要有一个没合并完就继续
            if p1 == m:        #注意其中一个数组都合并完的情况
                sorted.append(nums2[p2])
                p2 += 1
            elif p2 == n:
                sorted.append(nums1[p1])
                p1 += 1
            elif nums1[p1] < nums2[p2]:
                sorted.append(nums1[p1])
                p1 += 1
            else:
                sorted.append(nums2[p2])
                p2 += 1
        nums1[:] = sorted
#这种方法新建一个空间，最后赋给nums1


#尾插法，空间复杂度（1），无需新空间

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        i,j= m-1,n-1
        tail = m+n-1
        while i>=0 or j>=0:
            if i == -1:
                nums1[tail]=nums2[j]
                j-=1
                tail-=1
            elif j == -1:
                nums1[tail]=nums1[i]
                i-=1
                tail-=1
            elif(nums1[i]>nums2[j]):
                nums1[tail]=nums1[i]
                i-=1
                tail-=1
            elif (nums2[j]>=nums1[i]):
                nums1[tail]=nums2[j]
                j-=1
                tail-=1

#注意这四种情况是无交集的

